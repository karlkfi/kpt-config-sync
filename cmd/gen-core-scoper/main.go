// Copyright 2022 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package main

import (
	"fmt"
	"io/ioutil"
	"os"
	"strings"

	"k8s.io/apimachinery/pkg/runtime/schema"
)

const prefix = `// Code generated by cmd/gen-core-scoper/main.go. DO NOT EDIT

package discovery

import (
	"k8s.io/apimachinery/pkg/runtime/schema"
)

// CoreScoper returns a Scoper with the scopes of all core Kubernetes and Nomos
// types defined. Use this instead of building a Scoper from the response to an
// APIServer when one is unavailable.
func CoreScoper() Scoper {
	return Scoper{scope: map[schema.GroupKind]ScopeType{
`

func main() {
	// Types available on a default-created cluster for both Kubernetes 1.15 and 1.18.
	apiResources115, err := ioutil.ReadFile("cmd/gen-core-scoper/api_resources_1_15.txt")
	if err != nil {
		panic(err)
	}
	apiResources118, err := ioutil.ReadFile("cmd/gen-core-scoper/api_resources_1_18.txt")
	if err != nil {
		panic(err)
	}
	apiResources := append(apiResources115, apiResources118...)
	// Read Nomos-specific types which are not available on a default-created cluster.
	nomosResources, err := ioutil.ReadFile("cmd/gen-core-scoper/nomos_resources.txt")
	if err != nil {
		panic(err)
	}
	resources := append(apiResources, nomosResources...)

	lines := strings.Split(string(resources), "\n")
	sb := strings.Builder{}
	sb.WriteString(prefix)

	seen := make(map[schema.GroupKind]bool)
	for _, line := range lines {
		if line == "" {
			continue
		}

		// fields is a slice of the non-whitespace substrings of the line.
		fields := strings.Fields(line)
		if len(fields) == 2 {
			// This is part of the core group, whose APIGroup is empty string so we have
			// to add it manually.
			fields = append([]string{""}, fields...)
		}
		// fields is now APIGroup, isNamespaced, Kind

		gk := schema.GroupKind{Group: fields[0], Kind: fields[2]}
		if seen[gk] {
			// We've already added this type.
			continue
		}
		seen[gk] = true

		scope := "ClusterScope"
		if fields[1] == "true" {
			scope = "NamespaceScope"
		}

		sb.WriteString(fmt.Sprintf("\t\t{Group: %q, Kind: %q}: %s,\n", fields[0], fields[2], scope))
	}

	sb.WriteString(`	}}
}
`)

	err = ioutil.WriteFile("pkg/util/discovery/core_scoper.generated.go", []byte(sb.String()), os.ModePerm)
	if err != nil {
		panic(err)
	}

	fmt.Println("Don't forget to run `make fmt-go`!")
}
