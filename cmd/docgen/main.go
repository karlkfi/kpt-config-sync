package main

import (
	"flag"
	"os"

	"github.com/golang/glog"
	"github.com/google/nomos/pkg/policyimporter/analyzer/veterrors"
	"github.com/pkg/errors"
)

const (
	// Marks that the file is autogenerated.
	// This is the only platform-independent way of creating a comment in Markdown.
	autogenString = `[//]: # (Autogenerated file. Do not manually modify.)
`

	errorPreambleTmplString = `
# KNV{{.Code}}: {{.Aka}}
`
)

var (
	path = flag.String("path", os.Getenv("NOMOS_ERROR_DOCS_PATH"),
		"Path to write docs to. Defaults to NOMOS_ERROR_DOCS_PATH")
)

// Automatically generate documentation

// Main generates error documentation
func main() {
	flag.Parse()
	if *path == "" {
		glog.Fatal("--path must not be empty string")
	}

	if err := os.RemoveAll(*path); err != nil {
		glog.Fatal(errors.Wrap(err, "unable to clear old docs"))
	}
	if err := os.MkdirAll(*path, os.ModePerm); err != nil {
		glog.Fatal(errors.Wrap(err, "unable to create docs directory"))
	}

	if err := writeReadme(*path); err != nil {
		glog.Fatal(errors.Wrap(err, "error writing README.md"))
	}

	for code, explanation := range veterrors.Explanations {

		if explanation == "" {
			// No documentation for this error code yet.
			continue
		}
		if err := errorDocCode(code).document(*path); err != nil {
			glog.Fatal(errors.Wrapf(err, "error writing documentation for %s", code))
		}
	}
}
