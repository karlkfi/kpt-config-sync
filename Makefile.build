# Included by Makefile.
# Rules related to building nomos and docker images.

###################################
# Build environment
###################################

# Pulls the cached builenv docker image from gcrio.
pull-buildenv:
	@docker image inspect $(BUILDENV_IMAGE) &> /dev/null \
	|| docker pull $(BUILDENV_IMAGE)

build-buildenv: build/buildenv/Dockerfile
	@echo "+++ Creating the docker container for $(BUILDENV_IMAGE)"
	@docker build $(DOCKER_BUILD_QUIET) build/buildenv -t $(BUILDENV_IMAGE)

push-buildenv: build-buildenv
	@gcloud $(GCLOUD_QUIET) auth configure-docker
	@docker push $(BUILDENV_IMAGE)

###################################
# Docker images
###################################

.PHONY: build
build: $(OUTPUT_DIR) pull-buildenv
	@echo "+++ Build setup done"

# NOTE: this rule depends on OUTPUT_DIR because buildenv needs those dirs to
# exist in order to work.
PLATFORMS := linux_amd64 darwin_amd64 windows_amd64
build-cli: pull-buildenv buildenv-dirs
	@echo "+++ Compiling Nomos binaries for $(PLATFORMS)"
	@echo "+++ Compiling with VERSION: $(VERSION)"
	@mkdir -p $(addprefix $(OUTPUT_DIR)/go/bin/,$(PLATFORMS))
	@docker run $(DOCKER_RUN_ARGS) ./scripts/build.sh \
		--version $(VERSION) \
		$(PLATFORMS)

# Creates a docker image for the specified nomos component.
image-nomos:
	@echo "+++ Building the nomos image"
	@docker build $(DOCKER_BUILD_QUIET) \
		--target nomos \
		-t $(NOMOS_TAG) \
		-f build/all/Dockerfile \
		.
	@echo "+++ Building the Reconciler image"
	@docker build $(DOCKER_BUILD_QUIET) \
		--target reconciler \
		-t $(RECONCILER_TAG) \
		-f build/all/Dockerfile \
		.
	@echo "+++ Building the Reconciler Manager image"
	@docker build $(DOCKER_BUILD_QUIET) \
		--target manager \
		-t $(RECONCILER_MANAGER_TAG) \
		-f build/all/Dockerfile \
		.

# Pushes the specified component's docker image to gcr.io.
push-to-gcr-nomos: image-nomos
	@echo "+++ Pushing nomos image to gcr.io"
	@echo "+++ Using account:"
	gcloud config get-value account
	@gcloud $(GCLOUD_QUIET) auth configure-docker
	docker push $(NOMOS_TAG)
	docker push $(RECONCILER_TAG)
	docker push $(RECONCILER_MANAGER_TAG)

###################################
# YAML generation
###################################

# Generates the podspec yaml for each component.
.PHONY: gen-yaml-all
gen-yaml-all: \
		$(GEN_YAML_DIR)/git-importer.yaml \
		$(GEN_YAML_DIR)/monitor.yaml \
		$(GEN_YAML_DIR)/reconciler-manager-deployment-configmap.yaml \
		$(GEN_YAML_DIR)/reconciler-manager.yaml
	@echo "+++ Finished generating all yaml"

# Generates the podspec yaml for the component specified.
.PHONY: $(GEN_YAML_DIR)/git-importer.yaml
$(GEN_YAML_DIR)/git-importer.yaml: manifests/templates/git-importer.yaml
	@echo "+++ Generating yaml $@"
	@mkdir -p $(dir $@)
	@sed -e 's|IMAGE_NAME|$(NOMOS_TAG)|' < $< > $@

.PHONY: $(GEN_YAML_DIR)/monitor.yaml
$(GEN_YAML_DIR)/monitor.yaml: manifests/templates/monitor.yaml
	@echo "+++ Generating yaml $@"
	@mkdir -p $(dir $@)
	@sed -e 's|IMAGE_NAME|$(NOMOS_TAG)|' < $< > $@

.PHONY: $(GEN_YAML_DIR)/reconciler-manager-deployment-configmap.yaml
$(GEN_YAML_DIR)/reconciler-manager-deployment-configmap.yaml: \
		manifests/templates/reconciler-manager-deployment-configmap.yaml
	@echo "+++ Generating yaml $@"
	@mkdir -p $(dir $@)
	@sed -e 's|IMAGE_NAME|$(RECONCILER_TAG)|' < $< > $@

.PHONY: $(GEN_YAML_DIR)/reconciler-manager.yaml
$(GEN_YAML_DIR)/reconciler-manager.yaml: \
		manifests/templates/reconciler-manager.yaml
	@echo "+++ Generating yaml $@"
	@mkdir -p $(dir $@)
	@sed -e 's|IMAGE_NAME|$(RECONCILER_MANAGER_TAG)|' < $< > $@

###################################
# nomos-manifest
###################################

# config-sync-manifest creates the config-sync-manifest.yaml for release and incorporation into ACM Operator
.PHONY: config-sync-manifest
config-sync-manifest: push-to-gcr-nomos gen-yaml-all
	@echo "+++ Preparing config-sync-manifest.yaml"
	@rm -rf ${NOMOS_MANIFEST_STAGING_DIR}
	@mkdir -p ${NOMOS_MANIFEST_STAGING_DIR}
	@touch ${NOMOS_MANIFEST_STAGING_DIR}/config-sync-manifest.yaml
	@echo "+++ Copy manifests (except templates/) to output folder"
	@rm -rf $(OUTPUT_DIR)/manifests
	@mkdir $(OUTPUT_DIR)/manifests
	cp manifests/*.yaml $(OUTPUT_DIR)/manifests
	@echo "+++ Append all relevant yamls to config-sync-manifest.yaml"
	scripts/append-manifests.sh \
		$(OUTPUT_DIR)/manifests \
		${NOMOS_MANIFEST_STAGING_DIR}/config-sync-manifest.yaml
	scripts/append-manifests.sh \
		$(OUTPUT_DIR)/deployment \
		${NOMOS_MANIFEST_STAGING_DIR}/config-sync-manifest.yaml

# config-sync-manifest-e2e adds additional resources that are necessary for the e2e tests
#
# TODO (b/161182417): The appending business here is only necessary because append-manifests.sh
# is hard to use.  If improved, we could clean up this logic.
.PHONY: config-sync-manifest-e2e
config-sync-manifest-e2e: config-sync-manifest
	@touch ${NOMOS_MANIFEST_STAGING_DIR}/config-sync-manifest-e2e.yaml
	cat $(OUTPUT_DIR)/manifests/00-namespace.yaml >> ${NOMOS_MANIFEST_STAGING_DIR}/config-sync-manifest-e2e.yaml
	echo "---" >> ${NOMOS_MANIFEST_STAGING_DIR}/config-sync-manifest-e2e.yaml
	cat ${NOMOS_MANIFEST_STAGING_DIR}/config-sync-manifest.yaml >> ${NOMOS_MANIFEST_STAGING_DIR}/config-sync-manifest-e2e.yaml
	scripts/append-manifests.sh \
		e2e/raw-nomos/manifests \
		${NOMOS_MANIFEST_STAGING_DIR}/config-sync-manifest-e2e.yaml \
		mono-repo-configmaps # only this single file (pattern match)

###################################
# E2E Git Server
###################################

# NOTE: when updating the git-server version, update
# test/manifests/templates/git-server.yaml to reflect the version change
GIT_SERVER_DOCKER := $(OUTPUT_DIR)/git-server-docker
GIT_SERVER_RELEASE := v1.0.0
# Creates docker image for the test git-server from github source
build-git-server:
	@echo "+++ Building image for test git server"
	@mkdir -p $(OUTPUT_DIR)
	@rm -rf $(GIT_SERVER_DOCKER)
	@git clone https://github.com/jkarlosb/git-server-docker.git $(GIT_SERVER_DOCKER)
	@cd $(GIT_SERVER_DOCKER) && git checkout $(GIT_SERVER_RELEASE)
	@docker build $(DOCKER_BUILD_QUIET) \
			$(GIT_SERVER_DOCKER) \
			-t gcr.io/nomos-public/git-server:$(GIT_SERVER_RELEASE)
	@gcloud $(GCLOUD_QUIET) auth configure-docker
	@docker push gcr.io/nomos-public/git-server:$(GIT_SERVER_RELEASE)
