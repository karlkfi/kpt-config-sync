# e2e related build rules

E2E_PARAMS := \
	IMAGE_TAG=$(IMAGE_TAG) \
	GCP_PROJECT=$(GCP_PROJECT) \
	GCR_PREFIX=$(GCR_PREFIX) \

# The directory for e2e test related files
E2E_DIR := $(OUTPUT_DIR)/e2e

E2E_TEST_IMAGE = gcr.io/$(GCP_PROJECT)/e2e-tests:$(IMAGE_TAG)
E2E_TEST_IMAGE_LATEST = gcr.io/$(GCP_PROJECT)/e2e-tests:test-e2e-latest

# Create a staging directory for e2e
.PHONY: e2e-staging
e2e-staging: \
	$(OUTPUT_DIR) \
	prepare-e2e-manifest \
	$(wildcard ./e2e/*)
	@echo "+++ Creating staging directory for e2e tests"
	@rm -rf $(E2E_DIR)
	@mkdir -p $(E2E_DIR)
	@mkdir -p $(E2E_DIR)/third_party
	@cp -r ./third_party/bats-core $(E2E_DIR)/third_party
	@cp -r ./examples $(OUTPUT_DIR)/e2e
	@mkdir -p $(E2E_DIR)/scripts
	@cp ./scripts/init-git-server.sh $(E2E_DIR)/scripts
	@mkdir -p $(E2E_DIR)/test/manifests/templates
	@cp ./test/manifests/templates/git-server.yaml $(E2E_DIR)/test/manifests/templates
	@cp ${OPERATOR_STAGING_DIR}/defined-operator-bundle.yaml $(E2E_DIR)
	@cp -r ./e2e $(OUTPUT_DIR)

# Some e2e targets may wish to skip building the nomos CLI and download the latest remote one instead
# Clearly the paths here only work on linux_amd64. A more resilent way to do this is to use the
# build target instead of this target
download-cli: GO_BIN_DIR:=$(OUTPUT_DIR)/go/bin/linux_amd64
download-cli: $(OUTPUT_DIR)
	@mkdir -p $(GO_BIN_DIR)
	@gsutil cp gs://config-management-release/latest/linux_amd64/nomos $(GO_BIN_DIR)/nomos
	@chmod +x $(GO_BIN_DIR)/nomos

# Builds the e2e docker image and depencencies.
# Note that the GCP project is hardcoded since we currently don't want
# or need a config-management-release version of the e2e-tests image.
image-e2e-tests: \
		e2e-staging \
		build/e2e-tests/Dockerfile \
		build/e2e-tests/build.sh
	@echo "+++ Building the e2e docker image"
	@build/e2e-tests/build.sh \
		-t $(E2E_TEST_IMAGE) \
		-t $(E2E_TEST_IMAGE_LATEST) \
		$(DOCKER_BUILD_QUIET)


GOTOPT2_BINARY := docker run -i -u $(UID):$(GID) $(BUILDENV_IMAGE) /bin/gotopt2

__test-e2e-run:
	@echo "+++ Running e2e tests: git"
	@echo $(E2E_FLAGS)
	@env GOTOPT2_BINARY="$(GOTOPT2_BINARY)" \
		 e2e/e2e.sh \
		--TEMP_OUTPUT_DIR "$(TEMP_OUTPUT_DIR)" \
		--OUTPUT_DIR "$(OUTPUT_DIR)" \
		--e2e-container="$(E2E_TEST_IMAGE_LATEST)" \
		$(TEST_E2E_RUN_FLAGS) \
		-- \
		$(E2E_FLAGS) \
	    && echo "+++ git e2e tests completed" \
	    || (echo "### e2e tests failed. Temp dir (with test output logs etc) are available in ${TEMP_OUTPUT_DIR}"; exit 1)

e2e-image-all: push-to-gcr-nomos image-e2e-tests

banner:
	@cat ./build/banner.txt

push-e2e-tests: image-e2e-tests
	docker push $(E2E_TEST_IMAGE_LATEST)

# Makes sure that E2E_TEST_IMAGE_LATEST is available in the local docker cache.
# The image takes a *long* time to rebuild, so we reuse a prebuilt one instead.
ensure-image-e2e-tests:
	@if ! docker image inspect $(E2E_TEST_IMAGE_LATEST) > /dev/null; then \
		docker image pull $(E2E_TEST_IMAGE_LATEST); \
	fi

# Clean, ensure and run e2e tests for all importers.
# Clean cluster after running.
test-e2e-nobuild: banner push-to-gcr-nomos ensure-image-e2e-tests e2e-staging
	$(MAKE) __test-e2e-run \
		$(E2E_PARAMS) \
		E2E_FLAGS="\
			--preclean \
			--setup \
			--test \
			--clean \
			$(E2E_FLAGS)" \
		TEST_E2E_RUN_FLAGS="$(TEST_E2E_RUN_FLAGS)"

test-e2e-ephemeral:
	$(MAKE) test-e2e-nobuild \
		$(E2E_PARAMS) \
		E2E_FLAGS="\
			--timing \
			--create-ssh-key \
			--set-admin-role-binding=false \
			$(E2E_FLAGS) \
		" \
		TEST_E2E_RUN_FLAGS="\
			--hermetic \
			--use-ephemeral-cluster \
			$(TEST_E2E_RUN_FLAGS) \
		"

test-e2e: banner e2e-image-all
	$(MAKE) __test-e2e-run $(E2E_PARAMS) E2E_FLAGS="\
		--preclean \
		--setup \
		--test \
		--clean \
		$(E2E_FLAGS)"

# This target is for working on specific tests
test-e2e-dev: image-e2e-tests
	$(MAKE) __test-e2e-run $(E2E_PARAMS) E2E_FLAGS="\
		$(E2E_FLAGS)"

# Runs nomos vet locally for example repos.
# Requires kubeconfig set up properly with Nomos cluster.
# This is now a duplicate of cli.bats from the e2e tests framework,
# but can run locally without any of the setup.
test-nomos-vet-local: build
	@echo "Running test-nomos-vet-local..."
	$(NOMOS_LOCAL) --validate vet --path=./examples/acme
	$(NOMOS_LOCAL) vet --path=./examples/foo-corp-example/foo-corp

	@rm -rf ./.output/tmp/empty
	@mkdir ./.output/tmp/empty
	@cd ./.output/tmp/empty && git init && $(NOMOS_LOCAL) init && $(NOMOS_LOCAL) vet

include Makefile.e2e.ci
