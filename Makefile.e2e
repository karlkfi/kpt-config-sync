# e2e related build rules

OPERATOR_TARGET := prepare-operator

E2E_PARAMS := \
	IMAGE_TAG=$(IMAGE_TAG) \
	GCP_PROJECT=$(GCP_PROJECT) \
	GCR_PREFIX=$(GCR_PREFIX) \

# Create a staging directory for e2e
.PHONY: e2e-staging
e2e-staging: \
		$(OPERATOR_TARGET) \
		$(OUTPUT_DIR) \
		$(TEST_GEN_YAML_DIR)/git-server.yaml \
		$(wildcard ./e2e/*)
	@echo "+++ Creating staging directory for building e2e docker image"
	@rm -rf $(STAGING_DIR)/e2e-tests $(OUTPUT_DIR)/e2e
	@mkdir -p $(STAGING_DIR)/e2e-tests $(OUTPUT_DIR)/e2e
	@cp -r ./build/e2e-tests/* $(STAGING_DIR)/e2e-tests
	@cp -r ./third_party/bats-core $(OUTPUT_DIR)/e2e/bats
	@cp -r ./examples $(OUTPUT_DIR)/e2e
	@if [ -f $(HOME)/.ssh/id_rsa.nomos ]; then \
	  cp -n $(HOME)/.ssh/id_rsa.nomos $(OUTPUT_DIR)/e2e/id_rsa.nomos; \
	  cp $(HOME)/.ssh/id_rsa.nomos.pub $(OUTPUT_DIR)/e2e/id_rsa.nomos.pub; \
	fi
	@cp ./scripts/init-git-server.sh $(OUTPUT_DIR)/e2e/
	@cp $(TEST_GEN_YAML_DIR)/git-server.yaml $(OUTPUT_DIR)/e2e/
	@cp ${OPERATOR_STAGING_DIR}/defined-operator-bundle.yaml $(OUTPUT_DIR)/e2e/
	@cp -r ./e2e $(OUTPUT_DIR)

# Builds the e2e docker image and depencencies.
# Note that the GCP project is hardcoded since we currently don't want
# or need a nomos-release version of the e2e-tests image.
image-e2e-tests: \
		e2e-staging \
		push-to-gcr-nomos \
		build/e2e-tests/Dockerfile \
		build/e2e-tests/build.sh
	@echo "+++ Building the e2e docker image"
	@build/e2e-tests/build.sh \
		-t gcr.io/stolos-dev/e2e-tests:$(IMAGE_TAG) \
		-t gcr.io/stolos-dev/e2e-tests:test-e2e-latest \
		$(DOCKER_BUILD_QUIET)

test-e2e-run-git:
	@echo "+++ Running e2e tests: git"
	@e2e/e2e.sh \
		--TEMP_OUTPUT_DIR "$(TEMP_OUTPUT_DIR)" \
		--OUTPUT_DIR "$(OUTPUT_DIR)" \
		$(TEST_E2E_RUN_FLAGS) \
		-- \
		$(E2E_FLAGS) \
	    && echo "+++ git e2e tests completed" \
	    || (echo "### e2e tests failed. Temp dir (with test output logs etc) are available in ${TEMP_OUTPUT_DIR}"; exit 1)

e2e-image-all: image-e2e-tests

banner:
	@cat ./build/banner.txt

# Clean, build, and run e2e tests for all importers.
# Clean cluster after running.
test-e2e-all: banner e2e-image-all
	$(MAKE) test-e2e-run-git \
		$(E2E_PARAMS) \
		E2E_FLAGS="--preclean --setup --test --clean $(E2E_FLAGS)" \
		TEST_E2E_RUN_FLAGS="$(TEST_E2E_RUN_FLAGS)"

# Clean, build, and run e2e tests for a particular importer.
# Clean cluster after running.
test-e2e-git: e2e-image-all
	$(MAKE) test-e2e-run-git \
		$(E2E_PARAMS) \
		E2E_FLAGS="--preclean --setup --test --clean $(E2E_FLAGS)"

test-e2e-git-user:
	$(MAKE) IMAGE_TAG=${IMAGE_TAG} OPERATOR_TARGET=prepare-operator-user test-e2e-git

# Dev mode allows for specifying the args manually via E2E_FLAGS, see e2e/setup.sh for
# allowed flags.  This command assumes you will run "make e2e-staging" separately.
test-e2e-dev-git: e2e-staging
	$(MAKE) test-e2e-run-git \
		GCP_PROJECT=$(GCP_PROJECT)


# Runs nomos vet locally for example repos.
# Requires kubeconfig set up properly with Nomos cluster.
# This is now a duplicate of cli.bats from the e2e tests framework,
# but can run locally without any of the setup.
test-nomos-vet-local: build
	@echo "Running test-nomos-vet-local..."
	$(NOMOS_LOCAL) --validate vet --path=./examples/acme
	$(NOMOS_LOCAL) vet --path=./examples/foo-corp-example/foo-corp

	@rm -rf ./.output/tmp/empty
	@mkdir ./.output/tmp/empty
	@cd ./.output/tmp/empty && git init && $(NOMOS_LOCAL) init && $(NOMOS_LOCAL) vet

include Makefile.e2e.ci
include Makefile.e2e.syllogi
