# e2e related build rules

OPERATOR_TARGET := prepare-operator

E2E_PARAMS := \
	IMAGE_TAG=$(IMAGE_TAG) \
	GCP_PROJECT=$(GCP_PROJECT) \
	GCR_PREFIX=$(GCR_PREFIX) \
	GCP_E2E_WATCHER_CRED=$(GCP_E2E_WATCHER_CRED) \
        GCP_E2E_RUNNER_CRED=$(GCP_E2E_RUNNER_CRED)

# Note that it is basically a copy of the staging directory for the installer
# plus a few extras for e2e.
.PHONY: e2e-staging
e2e-staging: \
		$(OPERATOR_TARGET) \
		$(OUTPUT_DIR) \
		$(TEST_GEN_YAML_DIR)/git-server.yaml \
		$(wildcard $(TOP_DIR)/e2e/*)
	@echo "+++ Creating staging directory for building e2e docker image"
	@rm -rf $(STAGING_DIR)/e2e-tests $(OUTPUT_DIR)/e2e
	@mkdir -p $(STAGING_DIR)/e2e-tests $(OUTPUT_DIR)/e2e
	@cp -r $(TOP_DIR)/build/e2e-tests/* $(STAGING_DIR)/e2e-tests
	@cp -r $(TOP_DIR)/third_party/bats-core $(OUTPUT_DIR)/e2e/bats
	@cp -r $(TOP_DIR)/examples $(OUTPUT_DIR)/e2e
	@if [ -f $(HOME)/.ssh/id_rsa.nomos ]; then \
	  cp -n $(HOME)/.ssh/id_rsa.nomos $(OUTPUT_DIR)/e2e/id_rsa.nomos; \
	  cp $(HOME)/.ssh/id_rsa.nomos.pub $(OUTPUT_DIR)/e2e/id_rsa.nomos.pub; \
	fi
	@cp $(TOP_DIR)/scripts/init-git-server.sh $(OUTPUT_DIR)/e2e/
	@cp $(TEST_GEN_YAML_DIR)/git-server.yaml $(OUTPUT_DIR)/e2e/
	@cp -r $(STAGING_DIR)/installer $(OUTPUT_DIR)/e2e/
	@cp ${OPERATOR_STAGING_DIR}/defined-operator-bundle.yaml $(OUTPUT_DIR)/e2e/
	@cp -r $(TOP_DIR)/e2e $(OUTPUT_DIR)

# Builds the e2e docker image and depencencies.
# Note that the GCP project is hardcoded since we currently don't want
# or need a nomos-release version of the e2e-tests image.
image-e2e-tests: installer-staging e2e-staging \
		build/e2e-tests/Dockerfile \
		build/e2e-tests/build.sh
	@echo "+++ Building the e2e docker image"
	@build/e2e-tests/build.sh \
		-t gcr.io/stolos-dev/e2e-tests:$(IMAGE_TAG) \
		-t gcr.io/stolos-dev/e2e-tests:test-e2e-latest \
		$(DOCKER_BUILD_QUIET)

test-e2e-run-%:
	@echo "+++ Running e2e tests: $*"
	@mkdir -p ${INSTALLER_OUTPUT_DIR}/{kubeconfig,certs,gen_configs,logs}
	@e2e/e2e.sh \
		--TEMP_OUTPUT_DIR "$(TEMP_OUTPUT_DIR)" \
		--OUTPUT_DIR "$(OUTPUT_DIR)" \
		$(TEST_E2E_RUN_FLAGS) \
		-- \
		--importer "$*" \
		--gcp-watcher-cred "$(GCP_E2E_WATCHER_CRED)" \
		--gcp-runner-cred "$(GCP_E2E_RUNNER_CRED)" \
		$(E2E_FLAGS) \
	    && echo "+++ $* e2e tests completed" \
	    || (echo "### e2e tests failed. Temp dir (with test output logs etc) are available in ${TEMP_OUTPUT_DIR}"; exit 1)

e2e-image-all: image-e2e-tests installer-staging

banner:
	@cat $(TOP_DIR)/build/banner.txt

# Clean, build, and run e2e tests for all importers.
# Clean cluster after running.
test-e2e-all: banner e2e-image-all
	$(MAKE) test-e2e-run-git \
		$(E2E_PARAMS) \
		E2E_FLAGS="--preclean --setup --test --clean $(E2E_FLAGS)" \
		TEST_E2E_RUN_FLAGS="$(TEST_E2E_RUN_FLAGS)"
	$(MAKE) test-e2e-run-gcp \
		$(E2E_PARAMS) \
		E2E_FLAGS="--preclean --setup --test --clean $(E2E_FLAGS)" \
		TEST_E2E_RUN_FLAGS="$(TEST_E2E_RUN_FLAGS)"

test-e2e-gcp:
test-e2e-git:
# Clean, build, and run e2e tests for a particular importer.
# Clean cluster after running.
test-e2e-%: e2e-image-all
	$(MAKE) test-e2e-run-$* \
		$(E2E_PARAMS) \
		E2E_FLAGS="--preclean --setup --test --clean $(E2E_FLAGS)"

test-e2e-%-user:
	$(MAKE) OPERATOR_TARGET=prepare-operator-user test-e2e-$*

test-e2e-dev-gcp:
test-e2e-dev-git:
# Dev mode allows for specifying the args manually via E2E_FLAGS, see e2e/setup.sh for
# allowed flags
test-e2e-dev-%: e2e-staging
	$(MAKE) test-e2e-run-$* \
		GCP_PROJECT=$(GCP_PROJECT) \
		IMAGE_TAG=test-e2e-latest


# Runs nomosvet locally for example repos.
# Requires kubeconfig set up properly with Nomos cluster.
test-nomosvet-local: build
	@echo "Running test-nomosvet-local..."
	$(NOMOSVET_LOCAL) $(TOP_DIR)/examples/acme
	$(NOMOSVET_LOCAL) $(TOP_DIR)/examples/foo-corp-example/foo-corp
    # To update expected errors: nomosvet examples/errors 2> examples/errors/expected-errs.txt
	@if [ -f $(TOP_DIR)/.output/tmp/actual-errors.txt ]; then \
		rm $(TOP_DIR)/.output/tmp/actual-errors.txt; \
	fi
	$(NOMOSVET_LOCAL) $(TOP_DIR)/examples/errors 2> $(TOP_DIR)/.output/tmp/actual-errs.txt || true
	@diff $(TOP_DIR)/examples/errors/expected-errs.txt $(TOP_DIR)/.output/tmp/actual-errs.txt
	@grep -cF "source: /" .output/tmp/actual-errs.txt | grep -qF 0 # don't use paths beginning with root

	@if [ -f $(TOP_DIR)/.output/tmp/actual-errors-2.txt ]; then \
      rm $(TOP_DIR)/.output/tmp/actual-errors-2.txt; \
    fi
	$(NOMOSVET_LOCAL) $(TOP_DIR)/examples/parse-errors/invalid-yaml 2> $(TOP_DIR)/.output/tmp/actual-errs.txt || true
	@grep -qF "2 error(s)" $(TOP_DIR)/.output/tmp/actual-errs.txt # there are two errors
	@grep -cF "invalid object to validate" .output/tmp/actual-errs.txt | grep -qF 2 # they are invalid yaml
	$(NOMOSVET_LOCAL) $(TOP_DIR)/examples/parse-errors/unknown-resource-sync 2> $(TOP_DIR)/.output/tmp/actual-errs.txt || true
	@diff $(TOP_DIR)/examples/parse-errors/unknown-resource-sync/expected-errs.txt $(TOP_DIR)/.output/tmp/actual-errs.txt

include Makefile.e2e.ci
include Makefile.e2e.prober
