// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/google/nomos/pkg/generic-syncer/reconcile (interfaces: Applier)

// Package testing is a generated GoMock package.
package testing

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	runtime "k8s.io/apimachinery/pkg/runtime"
)

// MockApplier is a mock of Applier interface
type MockApplier struct {
	ctrl     *gomock.Controller
	recorder *MockApplierMockRecorder
}

// MockApplierMockRecorder is the mock recorder for MockApplier
type MockApplierMockRecorder struct {
	mock *MockApplier
}

// NewMockApplier creates a new mock instance
func NewMockApplier(ctrl *gomock.Controller) *MockApplier {
	mock := &MockApplier{ctrl: ctrl}
	mock.recorder = &MockApplierMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockApplier) EXPECT() *MockApplierMockRecorder {
	return m.recorder
}

// ApplyCluster mocks base method
func (m *MockApplier) ApplyCluster(arg0, arg1 runtime.Object) error {
	ret := m.ctrl.Call(m, "ApplyCluster", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ApplyCluster indicates an expected call of ApplyCluster
func (mr *MockApplierMockRecorder) ApplyCluster(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplyCluster", reflect.TypeOf((*MockApplier)(nil).ApplyCluster), arg0, arg1)
}

// ApplyNamespace mocks base method
func (m *MockApplier) ApplyNamespace(arg0 string, arg1, arg2 runtime.Object) error {
	ret := m.ctrl.Call(m, "ApplyNamespace", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// ApplyNamespace indicates an expected call of ApplyNamespace
func (mr *MockApplierMockRecorder) ApplyNamespace(arg0, arg1, arg2 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplyNamespace", reflect.TypeOf((*MockApplier)(nil).ApplyNamespace), arg0, arg1, arg2)
}

// Create mocks base method
func (m *MockApplier) Create(arg0 context.Context, arg1 runtime.Object) error {
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create
func (mr *MockApplierMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockApplier)(nil).Create), arg0, arg1)
}
