// Code generated by MockGen. DO NOT EDIT.
// Source: google.golang.org/genproto/googleapis/watcher/v1 (interfaces: WatcherClient,Watcher_WatchClient)

// Package testing is a generated GoMock package.
package testing

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	v1 "google.golang.org/genproto/googleapis/watcher/v1"
	grpc "google.golang.org/grpc"
	metadata "google.golang.org/grpc/metadata"
)

// MockWatcherClient is a mock of WatcherClient interface
type MockWatcherClient struct {
	ctrl     *gomock.Controller
	recorder *MockWatcherClientMockRecorder
}

// MockWatcherClientMockRecorder is the mock recorder for MockWatcherClient
type MockWatcherClientMockRecorder struct {
	mock *MockWatcherClient
}

// NewMockWatcherClient creates a new mock instance
func NewMockWatcherClient(ctrl *gomock.Controller) *MockWatcherClient {
	mock := &MockWatcherClient{ctrl: ctrl}
	mock.recorder = &MockWatcherClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockWatcherClient) EXPECT() *MockWatcherClientMockRecorder {
	return m.recorder
}

// Watch mocks base method
func (m *MockWatcherClient) Watch(arg0 context.Context, arg1 *v1.Request, arg2 ...grpc.CallOption) (v1.Watcher_WatchClient, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Watch", varargs...)
	ret0, _ := ret[0].(v1.Watcher_WatchClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Watch indicates an expected call of Watch
func (mr *MockWatcherClientMockRecorder) Watch(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Watch", reflect.TypeOf((*MockWatcherClient)(nil).Watch), varargs...)
}

// MockWatcher_WatchClient is a mock of Watcher_WatchClient interface
type MockWatcher_WatchClient struct {
	ctrl     *gomock.Controller
	recorder *MockWatcher_WatchClientMockRecorder
}

// MockWatcher_WatchClientMockRecorder is the mock recorder for MockWatcher_WatchClient
type MockWatcher_WatchClientMockRecorder struct {
	mock *MockWatcher_WatchClient
}

// NewMockWatcher_WatchClient creates a new mock instance
func NewMockWatcher_WatchClient(ctrl *gomock.Controller) *MockWatcher_WatchClient {
	mock := &MockWatcher_WatchClient{ctrl: ctrl}
	mock.recorder = &MockWatcher_WatchClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockWatcher_WatchClient) EXPECT() *MockWatcher_WatchClientMockRecorder {
	return m.recorder
}

// CloseSend mocks base method
func (m *MockWatcher_WatchClient) CloseSend() error {
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend
func (mr *MockWatcher_WatchClientMockRecorder) CloseSend() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockWatcher_WatchClient)(nil).CloseSend))
}

// Context mocks base method
func (m *MockWatcher_WatchClient) Context() context.Context {
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context
func (mr *MockWatcher_WatchClientMockRecorder) Context() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockWatcher_WatchClient)(nil).Context))
}

// Header mocks base method
func (m *MockWatcher_WatchClient) Header() (metadata.MD, error) {
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header
func (mr *MockWatcher_WatchClientMockRecorder) Header() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockWatcher_WatchClient)(nil).Header))
}

// Recv mocks base method
func (m *MockWatcher_WatchClient) Recv() (*v1.ChangeBatch, error) {
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*v1.ChangeBatch)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv
func (mr *MockWatcher_WatchClientMockRecorder) Recv() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockWatcher_WatchClient)(nil).Recv))
}

// RecvMsg mocks base method
func (m *MockWatcher_WatchClient) RecvMsg(arg0 interface{}) error {
	ret := m.ctrl.Call(m, "RecvMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg
func (mr *MockWatcher_WatchClientMockRecorder) RecvMsg(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockWatcher_WatchClient)(nil).RecvMsg), arg0)
}

// SendMsg mocks base method
func (m *MockWatcher_WatchClient) SendMsg(arg0 interface{}) error {
	ret := m.ctrl.Call(m, "SendMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg
func (mr *MockWatcher_WatchClientMockRecorder) SendMsg(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockWatcher_WatchClient)(nil).SendMsg), arg0)
}

// Trailer mocks base method
func (m *MockWatcher_WatchClient) Trailer() metadata.MD {
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer
func (mr *MockWatcher_WatchClientMockRecorder) Trailer() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockWatcher_WatchClient)(nil).Trailer))
}
