// nolint: goimports
// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/google/nomos/pkg/syncer/policyhierarchycontroller (interfaces: Module)

// Package testing is a generated GoMock package.
package testing

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	action "github.com/google/nomos/pkg/client/action"
	hierarchy "github.com/google/nomos/pkg/syncer/hierarchy"
	informers "github.com/kubernetes-sigs/kubebuilder/pkg/controller/informers"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// MockModule is a mock of Module interface
type MockModule struct {
	ctrl     *gomock.Controller
	recorder *MockModuleMockRecorder
}

// MockModuleMockRecorder is the mock recorder for MockModule
type MockModuleMockRecorder struct {
	mock *MockModule
}

// NewMockModule creates a new mock instance
func NewMockModule(ctrl *gomock.Controller) *MockModule {
	mock := &MockModule{ctrl: ctrl}
	mock.recorder = &MockModuleMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockModule) EXPECT() *MockModuleMockRecorder {
	return m.recorder
}

// ActionSpec mocks base method
func (m *MockModule) ActionSpec() *action.ReflectiveActionSpec {
	ret := m.ctrl.Call(m, "ActionSpec")
	ret0, _ := ret[0].(*action.ReflectiveActionSpec)
	return ret0
}

// ActionSpec indicates an expected call of ActionSpec
func (mr *MockModuleMockRecorder) ActionSpec() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ActionSpec", reflect.TypeOf((*MockModule)(nil).ActionSpec))
}

// Equal mocks base method
func (m *MockModule) Equal(arg0, arg1 v1.Object) bool {
	ret := m.ctrl.Call(m, "Equal", arg0, arg1)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Equal indicates an expected call of Equal
func (mr *MockModuleMockRecorder) Equal(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Equal", reflect.TypeOf((*MockModule)(nil).Equal), arg0, arg1)
}

// InformerProvider mocks base method
func (m *MockModule) InformerProvider() informers.InformerProvider {
	ret := m.ctrl.Call(m, "InformerProvider")
	ret0, _ := ret[0].(informers.InformerProvider)
	return ret0
}

// InformerProvider indicates an expected call of InformerProvider
func (mr *MockModuleMockRecorder) InformerProvider() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InformerProvider", reflect.TypeOf((*MockModule)(nil).InformerProvider))
}

// Instance mocks base method
func (m *MockModule) Instance() v1.Object {
	ret := m.ctrl.Call(m, "Instance")
	ret0, _ := ret[0].(v1.Object)
	return ret0
}

// Instance indicates an expected call of Instance
func (mr *MockModuleMockRecorder) Instance() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Instance", reflect.TypeOf((*MockModule)(nil).Instance))
}

// Name mocks base method
func (m *MockModule) Name() string {
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name
func (mr *MockModuleMockRecorder) Name() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockModule)(nil).Name))
}

// NewAggregatedNode mocks base method
func (m *MockModule) NewAggregatedNode() hierarchy.AggregatedNode {
	ret := m.ctrl.Call(m, "NewAggregatedNode")
	ret0, _ := ret[0].(hierarchy.AggregatedNode)
	return ret0
}

// NewAggregatedNode indicates an expected call of NewAggregatedNode
func (mr *MockModuleMockRecorder) NewAggregatedNode() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewAggregatedNode", reflect.TypeOf((*MockModule)(nil).NewAggregatedNode))
}
