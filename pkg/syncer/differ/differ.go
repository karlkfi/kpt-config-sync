/*
Copyright 2018 The CSP Config Management Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Package differ contains code for diffing sync-enabled resources, not
// necessarily known at compile time.
package differ

import (
	"fmt"

	"k8s.io/apimachinery/pkg/apis/meta/v1/unstructured"
)

// Type indicates the state of the given resource
type Type string

const (
	// NoOp indicates that no action should be taken.
	NoOp = Type("no-op")

	// Create indicates the resource should be created.
	Create = Type("create")

	// Update indicates the resource is declared and is on the API server, so we should
	// calculate a patch and apply it.
	Update = Type("update")

	// Delete indicates the resource should be deleted.
	Delete = Type("delete")

	// DeleteNsConfig indicates the namespaceconfig should be deleted.
	DeleteNsConfig = Type("deletensconfig")

	// Error indicates the resource's management annotation in the API server is invalid.
	Error = Type("error")

	// Unmanage indicates the resource's management annotation should be removed from the API Server.
	Unmanage = Type("unmanage")
)

// Equals is a function that takes two objects then compares them while ignoring the object meta
// labels and annotations.
type Equals func(*unstructured.Unstructured, *unstructured.Unstructured) bool

// Diff is resource where Declared and Actual do not match.
type Diff struct {
	// Name is the name of the resource this diff is for.
	Name string
	// Declared is the resource as it exists in the repository.
	Declared *unstructured.Unstructured
	// Actual is the resource as it exists in the cluster.
	Actual *unstructured.Unstructured
}

// Type returns the type of the difference between the repository and the API Server.
func (d Diff) Type() Type {

	if d.Declared != nil {
		// The resource IS in the repository.
		if managementUnset(d.Declared) {
			// The declared resource has no resource management key, so it is manged.
			if d.Actual != nil {
				// The resource is also in the cluster, so update it.
				return Update
			}
			// The resource is not in the cluster, so create it.
			return Create
		}
		if managementDisabled(d.Declared) {
			// The resource is explicitly marked management disabled in the repository.
			if d.Actual != nil {
				if hasNomosMeta(d.Actual) {
					// Management is disabled for the resource, so remove the annotation from the API Server.
					return Unmanage
				}
			}
			// Management is disabled and there's no required changes to the resource.
			return NoOp
		}
		// The annotation in the repo is invalid, so show an error.
		return Error
	}

	// The resource IS NOT in the repository.
	if d.Actual != nil {
		// The resource IS on the API Server.
		if len(d.Actual.GetOwnerReferences()) > 0 {
			// We disallow deleting resources with owner references.
			// So, do not attempt to delete resources on cluster with this field specified.
			// Most likely the actual resource was generated by a controller and had the
			// owner object's managed annotations propagated down to it.
			//
			// For example, if a Deployment is managed with Nomos, it will generate a ReplicaSet
			// that will inherit all the Deployment's annotations, including the managed
			// annotations. We will ignore the ReplicaSet because the ReplicaSet will have its
			// OwnerReference field set.
			return NoOp
		}

		if !hasNomosMeta(d.Actual) {
			// No Nomos annotations or labels, so don't do anything.
			return NoOp
		}

		// There are Nomos annotations or labels on the resource.
		if managementEnabled(d.Actual) {
			// Delete resource with management enabled on API Server.
			return Delete
		}
		// The resource has Nomos artifacts but is unmanged, so remove them.
		return Unmanage
	}

	// The resource is neither on the API Server nor in the repo, so do nothing.
	return NoOp
}

// Diffs returns the diffs between declared and actual state. We generate a diff for each GroupVersionKind.
// The actual resources are for all versions of a GroupKind and the declared resources are for a particular GroupKind.
// We need to ensure there is not a declared resource across all possible versions before we delete it.
// The diffs will be returned in an arbitrary order.
func Diffs(declared []*unstructured.Unstructured, actuals []*unstructured.Unstructured, allDeclaredVersions map[string]bool) []*Diff {
	actualsMap := map[string]*unstructured.Unstructured{}
	for _, obj := range actuals {
		// Assume no collisions among resources on API Server.
		actualsMap[obj.GetName()] = obj
	}

	decls := asMap(declared)
	var diffs []*Diff
	for name, decl := range decls {
		diffs = append(diffs, &Diff{
			Name:     name,
			Actual:   actualsMap[name],
			Declared: decl,
		})
	}
	for name, actual := range actualsMap {
		if !allDeclaredVersions[name] {
			// Not in any declared version, but on the API Server.
			diffs = append(diffs, &Diff{
				Name:   name,
				Actual: actual,
			})
		}
	}

	return diffs
}

func asMap(us []*unstructured.Unstructured) map[string]*unstructured.Unstructured {
	m := map[string]*unstructured.Unstructured{}
	for _, u := range us {
		name := u.GetName()
		if _, found := m[name]; found {
			panic(invalidInput{desc: fmt.Sprintf("Got duplicate decl for %q", name)})
		}
		m[name] = u
	}
	return m
}

type invalidInput struct {
	desc string
}

func (i *invalidInput) String() string {
	return i.desc
}
