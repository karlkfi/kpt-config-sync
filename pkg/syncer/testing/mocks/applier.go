// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/syncer/reconcile/apply.go

// Package testing is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	status "github.com/google/nomos/pkg/status"
	unstructured "k8s.io/apimachinery/pkg/apis/meta/v1/unstructured"
)

// MockApplier is a mock of Applier interface
type MockApplier struct {
	ctrl     *gomock.Controller
	recorder *MockApplierMockRecorder
}

// MockApplierMockRecorder is the mock recorder for MockApplier
type MockApplierMockRecorder struct {
	mock *MockApplier
}

// NewMockApplier creates a new mock instance
func NewMockApplier(ctrl *gomock.Controller) *MockApplier {
	mock := &MockApplier{ctrl: ctrl}
	mock.recorder = &MockApplierMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockApplier) EXPECT() *MockApplierMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockApplier) Create(ctx context.Context, obj *unstructured.Unstructured) (bool, status.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, obj)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(status.Error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *MockApplierMockRecorder) Create(ctx, obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockApplier)(nil).Create), ctx, obj)
}

// Update mocks base method
func (m *MockApplier) Update(ctx context.Context, intendedState, currentState *unstructured.Unstructured) (bool, status.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, intendedState, currentState)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(status.Error)
	return ret0, ret1
}

// Update indicates an expected call of Update
func (mr *MockApplierMockRecorder) Update(ctx, intendedState, currentState interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockApplier)(nil).Update), ctx, intendedState, currentState)
}

// Delete mocks base method
func (m *MockApplier) Delete(ctx context.Context, obj *unstructured.Unstructured) (bool, status.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, obj)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(status.Error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete
func (mr *MockApplierMockRecorder) Delete(ctx, obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockApplier)(nil).Delete), ctx, obj)
}
