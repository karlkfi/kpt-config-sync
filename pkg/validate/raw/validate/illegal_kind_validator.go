// Copyright 2022 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package validate

import (
	"k8s.io/apimachinery/pkg/runtime/schema"
	"kpt.dev/configsync/pkg/importer/analyzer/ast"
	"kpt.dev/configsync/pkg/importer/analyzer/validation/nonhierarchical"
	"kpt.dev/configsync/pkg/kinds"
	"kpt.dev/configsync/pkg/status"
)

// IllegalKindsForHierarchical verifies that the given FileObject is legal for
// a structured hierarchical repo.
func IllegalKindsForHierarchical(obj ast.FileObject) status.Error {
	gk := obj.GetObjectKind().GroupVersionKind().GroupKind()
	if isUnsupported(gk) {
		return nonhierarchical.UnsupportedObjectError(obj)
	}
	return nil
}

// IllegalKindsForUnstructured verifies that the given FileObject is legal for
// an unstructured repo.
func IllegalKindsForUnstructured(obj ast.FileObject) status.Error {
	gk := obj.GetObjectKind().GroupVersionKind().GroupKind()
	if isUnsupported(gk) {
		return nonhierarchical.UnsupportedObjectError(obj)
	}
	if isHierarchical(gk) {
		return nonhierarchical.IllegalHierarchicalKind(obj)
	}
	return nil
}

// isUnsupported returns true if the given GK matches a resource type that is
// never used in Config Sync repos:
//  - Sync is a type that is only generated by the Config Sync importer
func isUnsupported(gk schema.GroupKind) bool {
	return gk == kinds.Sync().GroupKind()
}

// isHiearachical returns true if the given GK matches a resource type that is
// only used for hierarchical repos:
//  - HierarchyConfig specifies the inheritance strategy for a resource type
//  - Repo specifies the version/format of a hierachical repo
func isHierarchical(gk schema.GroupKind) bool {
	return gk == kinds.Repo().GroupKind() || gk == kinds.HierarchyConfig().GroupKind()
}
