package validate

import (
	"github.com/google/nomos/pkg/importer/analyzer/ast"
	"github.com/google/nomos/pkg/importer/analyzer/validation/nonhierarchical"
	"github.com/google/nomos/pkg/kinds"
	"github.com/google/nomos/pkg/status"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

// IllegalKindsForHierarchical verifies that the given FileObject is legal for
// a structured hierarchical repo.
func IllegalKindsForHierarchical(obj ast.FileObject) status.Error {
	gk := obj.GroupVersionKind().GroupKind()
	if isUnsupported(gk) {
		return nonhierarchical.UnsupportedObjectError(obj)
	}
	return nil
}

// IllegalKindsForUnstructured verifies that the given FileObject is legal for
// an unstructured repo.
func IllegalKindsForUnstructured(obj ast.FileObject) status.Error {
	gk := obj.GroupVersionKind().GroupKind()
	if isUnsupported(gk) {
		return nonhierarchical.UnsupportedObjectError(obj)
	}
	if isHierarchical(gk) {
		return nonhierarchical.IllegalHierarchicalKind(obj)
	}
	return nil
}

// isUnsupported returns true if the given GK matches a resource type that is
// never used in Config Sync repos:
//  - Sync is a type that is only generated by the Config Sync importer
func isUnsupported(gk schema.GroupKind) bool {
	return gk == kinds.Sync().GroupKind()
}

// isHiearachical returns true if the given GK matches a resource type that is
// only used for hierarchical repos:
//  - HierarchyConfig specifies the inheritance strategy for a resource type
//  - Repo specifies the version/format of a hierachical repo
func isHierarchical(gk schema.GroupKind) bool {
	return gk == kinds.Repo().GroupKind() || gk == kinds.HierarchyConfig().GroupKind()
}
