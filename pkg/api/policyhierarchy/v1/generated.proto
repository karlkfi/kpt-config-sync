/*
Copyright 2018 The Nomos Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/


// This file was autogenerated by go-to-protobuf. Do not edit it manually!

syntax = 'proto2';

package github.com.google.nomos.pkg.api.policyhierarchy.v1;

import "k8s.io/api/core/v1/generated.proto";
import "k8s.io/api/extensions/v1beta1/generated.proto";
import "k8s.io/api/rbac/v1/generated.proto";
import "k8s.io/apimachinery/pkg/apis/meta/v1/generated.proto";
import "k8s.io/apimachinery/pkg/runtime/generated.proto";
import "k8s.io/apimachinery/pkg/runtime/schema/generated.proto";
import "k8s.io/apimachinery/pkg/util/intstr/generated.proto";

// Package-wide variables from generator "generated".
option go_package = "v1";

// ClusterPolicy is the top-level object for the policy node data definition.
// 
// It holds a policy defined for a single org unit (namespace).
// +protobuf=true
message ClusterPolicy {
  // Standard object's metadata.
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  // The actual object definition, per K8S object definition style.
  // +optional
  optional ClusterPolicySpec spec = 2;
}

// ClusterPolicyList holds a list of cluster level policies, returned as response to a List
// call on the cluster policy hierarchy.
// +protobuf=true
message ClusterPolicyList {
  // Standard object's metadata.
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  // Items is a list of policy nodes that apply.
  repeated ClusterPolicy items = 2;
}

// ClusterPolicySpec defines the policies that will exist at the cluster level.
// +protobuf=true
message ClusterPolicySpec {
  // +optional
  repeated k8s.io.api.rbac.v1.ClusterRole clusterRolesV1 = 1;

  // +optional
  repeated k8s.io.api.rbac.v1.ClusterRoleBinding clusterRoleBindingsV1 = 2;

  // +optional
  repeated k8s.io.api.extensions.v1beta1.PodSecurityPolicy podSecurityPolicyV1Beta1 = 3;
}

// PolicyNode is the top-level object for the policy node data definition.
// 
// It holds a policy defined for a single org unit (namespace).
// +protobuf=true
message PolicyNode {
  // Standard object's metadata. The Name field of the policy node must match the namespace name.
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  // The actual object definition, per K8S object definition style.
  // +optional
  optional PolicyNodeSpec spec = 2;
}

// PolicyNodeList holds a list of namespace policies, as response to a List
// call on the policy hierarchy API.
// +protobuf=true
message PolicyNodeList {
  // Standard object's metadata.
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  // Items is a list of policy nodes that apply.
  repeated PolicyNode items = 2;
}

// PolicyNodeSpec contains all the information about a policy linkage.
// +protobuf=true
message PolicyNodeSpec {
  // The type of the PolicyNode.
  optional string type = 1;

  // The parent org unit
  // +optional
  optional string parent = 2;

  // +optional
  repeated k8s.io.api.rbac.v1.Role rolesV1 = 3;

  // +optional
  repeated k8s.io.api.rbac.v1.RoleBinding roleBindingsV1 = 4;

  // +optional
  optional k8s.io.api.core.v1.ResourceQuota resourceQuotaV1 = 5;
}

