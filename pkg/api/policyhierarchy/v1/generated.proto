/*
Copyright 2018 The Nomos Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/


// This file was autogenerated by go-to-protobuf. Do not edit it manually!

syntax = 'proto2';

package github.com.google.nomos.pkg.api.policyhierarchy.v1;

import "k8s.io/api/core/v1/generated.proto";
import "k8s.io/api/extensions/v1beta1/generated.proto";
import "k8s.io/api/rbac/v1/generated.proto";
import "k8s.io/apimachinery/pkg/apis/meta/v1/generated.proto";
import "k8s.io/apimachinery/pkg/runtime/generated.proto";
import "k8s.io/apimachinery/pkg/runtime/schema/generated.proto";
import "k8s.io/apimachinery/pkg/util/intstr/generated.proto";

// Package-wide variables from generator "generated".
option go_package = "v1";

// ClusterPolicy is the top-level object for the policy node data definition.
// 
// It holds a policy defined for a single org unit (namespace).
// +protobuf=true
message ClusterPolicy {
  // Standard object's metadata.
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  // The actual object definition, per K8S object definition style.
  // +optional
  optional ClusterPolicySpec spec = 2;

  // The current status of the object, per K8S object definition style.
  // +optional
  optional ClusterPolicyStatus status = 3;
}

// ClusterPolicyList holds a list of cluster level policies, returned as response to a List
// call on the cluster policy hierarchy.
// +protobuf=true
message ClusterPolicyList {
  // Standard object's metadata.
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  // Items is a list of policy nodes that apply.
  repeated ClusterPolicy items = 2;
}

// ClusterPolicySpec defines the policies that will exist at the cluster level.
// +protobuf=true
message ClusterPolicySpec {
  // +optional
  repeated k8s.io.api.rbac.v1.ClusterRole clusterRolesV1 = 1;

  // +optional
  repeated k8s.io.api.rbac.v1.ClusterRoleBinding clusterRoleBindingsV1 = 2;

  // +optional
  repeated k8s.io.api.extensions.v1beta1.PodSecurityPolicy podSecurityPolicyV1Beta1 = 3;

  // ImportToken indicates the version of the ClusterPolicy last imported from the source of truth.
  // +optional
  optional string importToken = 4;

  // ImportTime is the timestamp of when the ClusterPolicy was updated by the Importer.
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time importTime = 5;
}

// ClusterPolicyStatus contains fields that define the status of a ClusterPolicy.
// +protobuf=true
message ClusterPolicyStatus {
  // SyncToken indicates the version of that policy that the Syncer last attempted to update from.
  // +optional
  optional string syncToken = 1;

  // SyncErrors contains any errors that occurred during the last attempt the Syncer made to update
  // resources from the ClusterPolicy specs. This field will be empty on success.
  // +optional
  repeated ClusterPolicySyncError syncErrors = 2;

  // SyncTime is the timestamp of when the policy resources were last updated by the Syncer.
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time syncTime = 3;

  // SyncState is the current state of the policy resources (eg synced, stale, error).
  // +optional
  optional string syncState = 4;
}

// ClusterPolicySyncError represents a failed sync attempt for a ClusterPolicy.
// +protobuf=true
message ClusterPolicySyncError {
  // ResourceName is the name of the K8S resource that failed to sync.
  // +optional
  optional string resourceName = 1;

  // ResourceKind is the type of the K8S resource (from TypeMeta.Kind).
  // +optional
  optional string resourceKind = 2;

  // ResourceAPI is the API and version of the K8S resource (from TypeMeta.ApiVersion).
  // +optional
  optional string resourceApi = 3;

  // ErrorMessage contains the error returned from API server when trying to sync.
  // +optional
  optional string errorMessage = 4;
}

// NamespaceSelector specifies a LabelSelector applied to namespaces that exist within a
// PolicyNode hierarchy.
// 
// +protobuf=true
message NamespaceSelector {
  // Standard object's metadata. The Name field of the policy node must match the namespace name.
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  // The actual object definition, per K8S object definition style.
  // +optional
  optional NamespaceSelectorSpec spec = 2;
}

// NamespaceSelectorList holds a list of NamespaceSelector resources.
// +protobuf=true
message NamespaceSelectorList {
  // Standard object's metadata.
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  // Items is a list of policy nodes that apply.
  repeated NamespaceSelector items = 2;
}

// NamespaceSelectorSpec contains spec fields for NamespaceSelector.
// +protobuf=true
message NamespaceSelectorSpec {
  // Selects namespaces.
  // This field is NOT optional and follows standard
  // label selector semantics. An empty selector matches all namespaces.
  optional k8s.io.apimachinery.pkg.apis.meta.v1.LabelSelector selector = 1;
}

// PolicyNode is the top-level object for the policy node data definition.
// 
// It holds a policy defined for a single org unit (namespace).
// +protobuf=true
message PolicyNode {
  // Standard object's metadata. The Name field of the policy node must match the namespace name.
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  // The actual object definition, per K8S object definition style.
  // +optional
  optional PolicyNodeSpec spec = 2;

  // The current status of the object, per K8S object definition style.
  // +optional
  optional PolicyNodeStatus status = 3;
}

// PolicyNodeList holds a list of namespace policies, as response to a List
// call on the policy hierarchy API.
// +protobuf=true
message PolicyNodeList {
  // Standard object's metadata.
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  // Items is a list of policy nodes that apply.
  repeated PolicyNode items = 2;
}

// PolicyNodeSpec contains all the information about a policy linkage.
// +protobuf=true
message PolicyNodeSpec {
  // The type of the PolicyNode.
  optional string type = 1;

  // The parent org unit
  // +optional
  optional string parent = 2;

  // +optional
  repeated k8s.io.api.rbac.v1.Role rolesV1 = 3;

  // +optional
  repeated k8s.io.api.rbac.v1.RoleBinding roleBindingsV1 = 4;

  // +optional
  optional k8s.io.api.core.v1.ResourceQuota resourceQuotaV1 = 5;

  // ImportToken indicates the version of the PolicyNode last imported from the source of truth.
  // +optional
  optional string importToken = 6;

  // ImportTime is the timestamp of when the PolicyNode was updated by the Importer.
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time importTime = 7;
}

// PolicyNodeStatus contains fields that define the status of a PolicyNode. The fields related to Syncer
// will never be populated for PolicySpaces since they are flattened down to child Namespaces.
// +protobuf=true
message PolicyNodeStatus {
  // SyncTokens is a map of policy name to token indicating the version of that policy that the
  // Syncer last attempted to update from. There will always be one entry for the PolicyNode itself
  // as well as one entry for each PolicyNode up its hierarchy.
  // +optional
  map<string, string> syncTokens = 1;

  // SyncErrors contains any errors that occurred during the last attempt the Syncer made to update
  // resources from the PolicyNode specs. This field will be empty on success.
  // +optional
  repeated PolicyNodeSyncError syncErrors = 2;

  // SyncTime is the timestamp of when the policy resources were last updated by the Syncer.
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time syncTime = 3;

  // SyncState is the current state of the policy resources (eg synced, stale, error).
  // +optional
  optional string syncState = 4;
}

// PolicyNodeSyncError represents a failed sync attempt for a PolicyNode.
// +protobuf=true
message PolicyNodeSyncError {
  // SourceName is the name of the PolicyNode where the resource is defined.
  // +optional
  optional string sourceName = 1;

  // ResourceName is the name of the K8S resource that failed to sync.
  // +optional
  optional string resourceName = 2;

  // ResourceKind is the type of the K8S resource (from TypeMeta.Kind).
  // +optional
  optional string resourceKind = 3;

  // ResourceAPI is the API and version of the K8S resource (from TypeMeta.ApiVersion).
  // +optional
  optional string resourceApi = 4;

  // ErrorMessage contains the error returned from API server when trying to sync.
  // +optional
  optional string errorMessage = 5;
}

