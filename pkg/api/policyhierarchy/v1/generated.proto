/*
Copyright 2018 The Nomos Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/


// This file was autogenerated by go-to-protobuf. Do not edit it manually!

syntax = 'proto2';

package github.com.google.nomos.pkg.api.policyhierarchy.v1;

import "k8s.io/api/core/v1/generated.proto";
import "k8s.io/api/extensions/v1beta1/generated.proto";
import "k8s.io/api/rbac/v1/generated.proto";
import "k8s.io/apimachinery/pkg/apis/meta/v1/generated.proto";
import "k8s.io/apimachinery/pkg/runtime/generated.proto";
import "k8s.io/apimachinery/pkg/runtime/schema/generated.proto";
import "k8s.io/apimachinery/pkg/util/intstr/generated.proto";

// Package-wide variables from generator "generated".
option go_package = "v1";

// ClusterPolicies specifies the policies nomos synchronizes to a cluster. This is factored out
// due to the fact that it is specified in MasterClusterPolicyNodeSpec and ClusterPolicyNodeSpec.
// +protobuf=true
message ClusterPolicies {
  // Type defines the type of resources that this holds. It will hold one of the cluster scoped
  // resources and should have a resource name that matches the resource type it holds.
  optional string type = 1;

  // Cluster scope resources.
  repeated k8s.io.api.rbac.v1.ClusterRole clusterRolesV1 = 2;

  repeated k8s.io.api.rbac.v1.ClusterRoleBinding clusterRoleBindingsV1 = 3;

  repeated k8s.io.api.extensions.v1beta1.PodSecurityPolicy podSecurityPolicyV1Beta1 = 4;
}

// ClusterPolicy is the top-level object for the policy node data definition.
// 
// It holds a policy defined for a single org unit (namespace).
// +protobuf=true
message ClusterPolicy {
  // Standard object's metadata.
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  // The actual object definition, per K8S object definition style.
  optional ClusterPolicySpec spec = 2;
}

// ClusterPolicyList holds a list of cluster level policies, returned as response to a List
// call on the cluster policy hierarchy.
// +protobuf=true
message ClusterPolicyList {
  // Standard object's metadata.
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  // Items is a list of policy nodes that apply.
  repeated ClusterPolicy items = 2;
}

// ClusterPolicySpec defines the policies that will exist at the cluster level.
// +protobuf=true
message ClusterPolicySpec {
  // Sources describes the resource / name / resourceVersion of definitions that were merged to
  // create this object, for example ["clusterpolicy.prod.275564"]. Note that there is no ambiguity
  // in this as the resource name and resource version are not allowed to contain the '.' character.
  // This field will not be set in the MasterPolicyNode and will only be set at enrolled clusters.
  repeated string sources = 1;

  // The policies specified for cluster level resources.
  optional ClusterPolicies policies = 2;
}

// Policies contains all the defined policies that are linked to a particular
// PolicyNode.
// +protobuf=true
message Policies {
  repeated k8s.io.api.rbac.v1.Role rolesV1 = 1;

  repeated k8s.io.api.rbac.v1.RoleBinding roleBindingsV1 = 2;

  optional k8s.io.api.core.v1.ResourceQuota resourceQuotaV1 = 3;
}

// PolicyNode is the top-level object for the policy node data definition.
// 
// It holds a policy defined for a single org unit (namespace).
// +protobuf=true
message PolicyNode {
  // Standard object's metadata. The Name field of the policy node must match the namespace name.
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  // The actual object definition, per K8S object definition style.
  optional PolicyNodeSpec spec = 2;
}

// PolicyNodeList holds a list of namespace policies, as response to a List
// call on the policy hierarchy API.
// +protobuf=true
message PolicyNodeList {
  // Standard object's metadata.
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  // Items is a list of policy nodes that apply.
  repeated PolicyNode items = 2;
}

// PolicyNodeSpec contains all the information about a policy linkage.
// +protobuf=true
message PolicyNodeSpec {
  // False for leaf namespaces where pods will actually be scheduled,
  // True for the parent org unit namespace where this policy is linked
  // to, but no containers should run
  optional bool policyspace = 1;

  // The parent org unit
  optional string parent = 2;

  // The policies attached to that node
  optional Policies policies = 3;
}

