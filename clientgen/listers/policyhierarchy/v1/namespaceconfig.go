/*
Copyright 2019 The Nomos Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/google/nomos/pkg/api/policyhierarchy/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// NamespaceConfigLister helps list NamespaceConfigs.
type NamespaceConfigLister interface {
	// List lists all NamespaceConfigs in the indexer.
	List(selector labels.Selector) (ret []*v1.NamespaceConfig, err error)
	// Get retrieves the NamespaceConfig from the index for a given name.
	Get(name string) (*v1.NamespaceConfig, error)
	NamespaceConfigListerExpansion
}

// namespaceConfigLister implements the NamespaceConfigLister interface.
type namespaceConfigLister struct {
	indexer cache.Indexer
}

// NewNamespaceConfigLister returns a new NamespaceConfigLister.
func NewNamespaceConfigLister(indexer cache.Indexer) NamespaceConfigLister {
	return &namespaceConfigLister{indexer: indexer}
}

// List lists all NamespaceConfigs in the indexer.
func (s *namespaceConfigLister) List(selector labels.Selector) (ret []*v1.NamespaceConfig, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.NamespaceConfig))
	})
	return ret, err
}

// Get retrieves the NamespaceConfig from the index for a given name.
func (s *namespaceConfigLister) Get(name string) (*v1.NamespaceConfig, error) {
	obj, exists, err := s.indexer.GetByKey(name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("namespaceconfig"), name)
	}
	return obj.(*v1.NamespaceConfig), nil
}
