/*
Copyright 2018 The Nomos Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/google/nomos/pkg/api/policyascode/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ClusterOrganizationPolicyLister helps list ClusterOrganizationPolicies.
type ClusterOrganizationPolicyLister interface {
	// List lists all ClusterOrganizationPolicies in the indexer.
	List(selector labels.Selector) (ret []*v1.ClusterOrganizationPolicy, err error)
	// Get retrieves the ClusterOrganizationPolicy from the index for a given name.
	Get(name string) (*v1.ClusterOrganizationPolicy, error)
	ClusterOrganizationPolicyListerExpansion
}

// clusterOrganizationPolicyLister implements the ClusterOrganizationPolicyLister interface.
type clusterOrganizationPolicyLister struct {
	indexer cache.Indexer
}

// NewClusterOrganizationPolicyLister returns a new ClusterOrganizationPolicyLister.
func NewClusterOrganizationPolicyLister(indexer cache.Indexer) ClusterOrganizationPolicyLister {
	return &clusterOrganizationPolicyLister{indexer: indexer}
}

// List lists all ClusterOrganizationPolicies in the indexer.
func (s *clusterOrganizationPolicyLister) List(selector labels.Selector) (ret []*v1.ClusterOrganizationPolicy, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.ClusterOrganizationPolicy))
	})
	return ret, err
}

// Get retrieves the ClusterOrganizationPolicy from the index for a given name.
func (s *clusterOrganizationPolicyLister) Get(name string) (*v1.ClusterOrganizationPolicy, error) {
	obj, exists, err := s.indexer.GetByKey(name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("clusterorganizationpolicy"), name)
	}
	return obj.(*v1.ClusterOrganizationPolicy), nil
}
