/*
Copyright 2018 The Nomos Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// This file was automatically generated by lister-gen

package v1

import (
	v1 "github.com/google/nomos/pkg/api/policyascode/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// PrototypePolicyAsCodeLister helps list PrototypePolicyAsCodes.
type PrototypePolicyAsCodeLister interface {
	// List lists all PrototypePolicyAsCodes in the indexer.
	List(selector labels.Selector) (ret []*v1.PrototypePolicyAsCode, err error)
	// Get retrieves the PrototypePolicyAsCode from the index for a given name.
	Get(name string) (*v1.PrototypePolicyAsCode, error)
	PrototypePolicyAsCodeListerExpansion
}

// prototypePolicyAsCodeLister implements the PrototypePolicyAsCodeLister interface.
type prototypePolicyAsCodeLister struct {
	indexer cache.Indexer
}

// NewPrototypePolicyAsCodeLister returns a new PrototypePolicyAsCodeLister.
func NewPrototypePolicyAsCodeLister(indexer cache.Indexer) PrototypePolicyAsCodeLister {
	return &prototypePolicyAsCodeLister{indexer: indexer}
}

// List lists all PrototypePolicyAsCodes in the indexer.
func (s *prototypePolicyAsCodeLister) List(selector labels.Selector) (ret []*v1.PrototypePolicyAsCode, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.PrototypePolicyAsCode))
	})
	return ret, err
}

// Get retrieves the PrototypePolicyAsCode from the index for a given name.
func (s *prototypePolicyAsCodeLister) Get(name string) (*v1.PrototypePolicyAsCode, error) {
	obj, exists, err := s.indexer.GetByKey(name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("prototypepolicyascode"), name)
	}
	return obj.(*v1.PrototypePolicyAsCode), nil
}
