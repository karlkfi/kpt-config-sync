// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	configmanagementv1 "github.com/google/nomos/pkg/api/configmanagement/v1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	labels "k8s.io/apimachinery/pkg/labels"
	schema "k8s.io/apimachinery/pkg/runtime/schema"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	testing "k8s.io/client-go/testing"
)

// FakeHierarchicalQuotas implements HierarchicalQuotaInterface
type FakeHierarchicalQuotas struct {
	Fake *FakeConfigmanagementV1
}

var hierarchicalquotasResource = schema.GroupVersionResource{Group: "configmanagement.gke.io", Version: "v1", Resource: "hierarchicalquotas"}

var hierarchicalquotasKind = schema.GroupVersionKind{Group: "configmanagement.gke.io", Version: "v1", Kind: "HierarchicalQuota"}

// Get takes name of the hierarchicalQuota, and returns the corresponding hierarchicalQuota object, and an error if there is any.
func (c *FakeHierarchicalQuotas) Get(name string, options v1.GetOptions) (result *configmanagementv1.HierarchicalQuota, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootGetAction(hierarchicalquotasResource, name), &configmanagementv1.HierarchicalQuota{})
	if obj == nil {
		return nil, err
	}
	return obj.(*configmanagementv1.HierarchicalQuota), err
}

// List takes label and field selectors, and returns the list of HierarchicalQuotas that match those selectors.
func (c *FakeHierarchicalQuotas) List(opts v1.ListOptions) (result *configmanagementv1.HierarchicalQuotaList, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootListAction(hierarchicalquotasResource, hierarchicalquotasKind, opts), &configmanagementv1.HierarchicalQuotaList{})
	if obj == nil {
		return nil, err
	}

	label, _, _ := testing.ExtractFromListOptions(opts)
	if label == nil {
		label = labels.Everything()
	}
	list := &configmanagementv1.HierarchicalQuotaList{ListMeta: obj.(*configmanagementv1.HierarchicalQuotaList).ListMeta}
	for _, item := range obj.(*configmanagementv1.HierarchicalQuotaList).Items {
		if label.Matches(labels.Set(item.Labels)) {
			list.Items = append(list.Items, item)
		}
	}
	return list, err
}

// Watch returns a watch.Interface that watches the requested hierarchicalQuotas.
func (c *FakeHierarchicalQuotas) Watch(opts v1.ListOptions) (watch.Interface, error) {
	return c.Fake.
		InvokesWatch(testing.NewRootWatchAction(hierarchicalquotasResource, opts))
}

// Create takes the representation of a hierarchicalQuota and creates it.  Returns the server's representation of the hierarchicalQuota, and an error, if there is any.
func (c *FakeHierarchicalQuotas) Create(hierarchicalQuota *configmanagementv1.HierarchicalQuota) (result *configmanagementv1.HierarchicalQuota, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootCreateAction(hierarchicalquotasResource, hierarchicalQuota), &configmanagementv1.HierarchicalQuota{})
	if obj == nil {
		return nil, err
	}
	return obj.(*configmanagementv1.HierarchicalQuota), err
}

// Update takes the representation of a hierarchicalQuota and updates it. Returns the server's representation of the hierarchicalQuota, and an error, if there is any.
func (c *FakeHierarchicalQuotas) Update(hierarchicalQuota *configmanagementv1.HierarchicalQuota) (result *configmanagementv1.HierarchicalQuota, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootUpdateAction(hierarchicalquotasResource, hierarchicalQuota), &configmanagementv1.HierarchicalQuota{})
	if obj == nil {
		return nil, err
	}
	return obj.(*configmanagementv1.HierarchicalQuota), err
}

// Delete takes name of the hierarchicalQuota and deletes it. Returns an error if one occurs.
func (c *FakeHierarchicalQuotas) Delete(name string, options *v1.DeleteOptions) error {
	_, err := c.Fake.
		Invokes(testing.NewRootDeleteAction(hierarchicalquotasResource, name), &configmanagementv1.HierarchicalQuota{})
	return err
}

// DeleteCollection deletes a collection of objects.
func (c *FakeHierarchicalQuotas) DeleteCollection(options *v1.DeleteOptions, listOptions v1.ListOptions) error {
	action := testing.NewRootDeleteCollectionAction(hierarchicalquotasResource, listOptions)

	_, err := c.Fake.Invokes(action, &configmanagementv1.HierarchicalQuotaList{})
	return err
}

// Patch applies the patch and returns the patched hierarchicalQuota.
func (c *FakeHierarchicalQuotas) Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *configmanagementv1.HierarchicalQuota, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootPatchSubresourceAction(hierarchicalquotasResource, name, data, subresources...), &configmanagementv1.HierarchicalQuota{})
	if obj == nil {
		return nil, err
	}
	return obj.(*configmanagementv1.HierarchicalQuota), err
}
