/*
Copyright 2019 The Nomos Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by client-gen. DO NOT EDIT.

package v1

import (
	scheme "github.com/google/nomos/clientgen/apis/scheme"
	v1 "github.com/google/nomos/pkg/api/policyascode/v1"
	meta_v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	rest "k8s.io/client-go/rest"
)

// ClusterIAMPoliciesGetter has a method to return a ClusterIAMPolicyInterface.
// A group's client should implement this interface.
type ClusterIAMPoliciesGetter interface {
	ClusterIAMPolicies() ClusterIAMPolicyInterface
}

// ClusterIAMPolicyInterface has methods to work with ClusterIAMPolicy resources.
type ClusterIAMPolicyInterface interface {
	Create(*v1.ClusterIAMPolicy) (*v1.ClusterIAMPolicy, error)
	Update(*v1.ClusterIAMPolicy) (*v1.ClusterIAMPolicy, error)
	UpdateStatus(*v1.ClusterIAMPolicy) (*v1.ClusterIAMPolicy, error)
	Delete(name string, options *meta_v1.DeleteOptions) error
	DeleteCollection(options *meta_v1.DeleteOptions, listOptions meta_v1.ListOptions) error
	Get(name string, options meta_v1.GetOptions) (*v1.ClusterIAMPolicy, error)
	List(opts meta_v1.ListOptions) (*v1.ClusterIAMPolicyList, error)
	Watch(opts meta_v1.ListOptions) (watch.Interface, error)
	Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1.ClusterIAMPolicy, err error)
	ClusterIAMPolicyExpansion
}

// clusterIAMPolicies implements ClusterIAMPolicyInterface
type clusterIAMPolicies struct {
	client rest.Interface
}

// newClusterIAMPolicies returns a ClusterIAMPolicies
func newClusterIAMPolicies(c *BespinV1Client) *clusterIAMPolicies {
	return &clusterIAMPolicies{
		client: c.RESTClient(),
	}
}

// Get takes name of the clusterIAMPolicy, and returns the corresponding clusterIAMPolicy object, and an error if there is any.
func (c *clusterIAMPolicies) Get(name string, options meta_v1.GetOptions) (result *v1.ClusterIAMPolicy, err error) {
	result = &v1.ClusterIAMPolicy{}
	err = c.client.Get().
		Resource("clusteriampolicies").
		Name(name).
		VersionedParams(&options, scheme.ParameterCodec).
		Do().
		Into(result)
	return
}

// List takes label and field selectors, and returns the list of ClusterIAMPolicies that match those selectors.
func (c *clusterIAMPolicies) List(opts meta_v1.ListOptions) (result *v1.ClusterIAMPolicyList, err error) {
	result = &v1.ClusterIAMPolicyList{}
	err = c.client.Get().
		Resource("clusteriampolicies").
		VersionedParams(&opts, scheme.ParameterCodec).
		Do().
		Into(result)
	return
}

// Watch returns a watch.Interface that watches the requested clusterIAMPolicies.
func (c *clusterIAMPolicies) Watch(opts meta_v1.ListOptions) (watch.Interface, error) {
	opts.Watch = true
	return c.client.Get().
		Resource("clusteriampolicies").
		VersionedParams(&opts, scheme.ParameterCodec).
		Watch()
}

// Create takes the representation of a clusterIAMPolicy and creates it.  Returns the server's representation of the clusterIAMPolicy, and an error, if there is any.
func (c *clusterIAMPolicies) Create(clusterIAMPolicy *v1.ClusterIAMPolicy) (result *v1.ClusterIAMPolicy, err error) {
	result = &v1.ClusterIAMPolicy{}
	err = c.client.Post().
		Resource("clusteriampolicies").
		Body(clusterIAMPolicy).
		Do().
		Into(result)
	return
}

// Update takes the representation of a clusterIAMPolicy and updates it. Returns the server's representation of the clusterIAMPolicy, and an error, if there is any.
func (c *clusterIAMPolicies) Update(clusterIAMPolicy *v1.ClusterIAMPolicy) (result *v1.ClusterIAMPolicy, err error) {
	result = &v1.ClusterIAMPolicy{}
	err = c.client.Put().
		Resource("clusteriampolicies").
		Name(clusterIAMPolicy.Name).
		Body(clusterIAMPolicy).
		Do().
		Into(result)
	return
}

// UpdateStatus was generated because the type contains a Status member.
// Add a +genclient:noStatus comment above the type to avoid generating UpdateStatus().

func (c *clusterIAMPolicies) UpdateStatus(clusterIAMPolicy *v1.ClusterIAMPolicy) (result *v1.ClusterIAMPolicy, err error) {
	result = &v1.ClusterIAMPolicy{}
	err = c.client.Put().
		Resource("clusteriampolicies").
		Name(clusterIAMPolicy.Name).
		SubResource("status").
		Body(clusterIAMPolicy).
		Do().
		Into(result)
	return
}

// Delete takes name of the clusterIAMPolicy and deletes it. Returns an error if one occurs.
func (c *clusterIAMPolicies) Delete(name string, options *meta_v1.DeleteOptions) error {
	return c.client.Delete().
		Resource("clusteriampolicies").
		Name(name).
		Body(options).
		Do().
		Error()
}

// DeleteCollection deletes a collection of objects.
func (c *clusterIAMPolicies) DeleteCollection(options *meta_v1.DeleteOptions, listOptions meta_v1.ListOptions) error {
	return c.client.Delete().
		Resource("clusteriampolicies").
		VersionedParams(&listOptions, scheme.ParameterCodec).
		Body(options).
		Do().
		Error()
}

// Patch applies the patch and returns the patched clusterIAMPolicy.
func (c *clusterIAMPolicies) Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1.ClusterIAMPolicy, err error) {
	result = &v1.ClusterIAMPolicy{}
	err = c.client.Patch(pt).
		Resource("clusteriampolicies").
		SubResource(subresources...).
		Name(name).
		Body(data).
		Do().
		Into(result)
	return
}
